/**
 *
 *  StudentTask.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/StudentTask.hpp"
#include "Models/Student.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::schedule_db;

const std::string StudentTask::Cols::_id = "\"id\"";
const std::string StudentTask::Cols::_task = "\"task\"";
const std::string StudentTask::Cols::_student_id = "\"student_id\"";
const std::string StudentTask::primaryKeyName = "id";
const bool StudentTask::hasPrimaryKey = true;
const std::string StudentTask::tableName = "\"student_task\"";

const std::vector<typename StudentTask::MetaData> StudentTask::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"task","std::string","character varying",255,0,0,0},
{"student_id","int32_t","integer",4,0,0,0}
};
const std::string &StudentTask::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
StudentTask::StudentTask(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["task"].isNull())
        {
            task_=std::make_shared<std::string>(r["task"].as<std::string>());
        }
        if(!r["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>(r["student_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            task_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            studentId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

StudentTask::StudentTask(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            task_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

StudentTask::StudentTask(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("task"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["task"].isNull())
        {
            task_=std::make_shared<std::string>(pJson["task"].asString());
        }
    }
    if(pJson.isMember("student_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson["student_id"].asInt64());
        }
    }
}

void StudentTask::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            task_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

void StudentTask::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("task"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["task"].isNull())
        {
            task_=std::make_shared<std::string>(pJson["task"].asString());
        }
    }
    if(pJson.isMember("student_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson["student_id"].asInt64());
        }
    }
}

const int32_t &StudentTask::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &StudentTask::getId() const noexcept
{
    return id_;
}
void StudentTask::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename StudentTask::PrimaryKeyType & StudentTask::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &StudentTask::getValueOfTask() const noexcept
{
    static const std::string defaultValue = std::string();
    if(task_)
        return *task_;
    return defaultValue;
}
const std::shared_ptr<std::string> &StudentTask::getTask() const noexcept
{
    return task_;
}
void StudentTask::setTask(const std::string &pTask) noexcept
{
    task_ = std::make_shared<std::string>(pTask);
    dirtyFlag_[1] = true;
}
void StudentTask::setTask(std::string &&pTask) noexcept
{
    task_ = std::make_shared<std::string>(std::move(pTask));
    dirtyFlag_[1] = true;
}
void StudentTask::setTaskToNull() noexcept
{
    task_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &StudentTask::getValueOfStudentId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(studentId_)
        return *studentId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &StudentTask::getStudentId() const noexcept
{
    return studentId_;
}
void StudentTask::setStudentId(const int32_t &pStudentId) noexcept
{
    studentId_ = std::make_shared<int32_t>(pStudentId);
    dirtyFlag_[2] = true;
}
void StudentTask::setStudentIdToNull() noexcept
{
    studentId_.reset();
    dirtyFlag_[2] = true;
}

void StudentTask::updateId(const uint64_t id)
{
}

const std::vector<std::string> &StudentTask::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "task",
        "student_id"
    };
    return inCols;
}

void StudentTask::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTask())
        {
            binder << getValueOfTask();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStudentId())
        {
            binder << getValueOfStudentId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> StudentTask::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void StudentTask::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTask())
        {
            binder << getValueOfTask();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStudentId())
        {
            binder << getValueOfStudentId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value StudentTask::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTask())
    {
        ret["task"]=getValueOfTask();
    }
    else
    {
        ret["task"]=Json::Value();
    }
    if(getStudentId())
    {
        ret["student_id"]=getValueOfStudentId();
    }
    else
    {
        ret["student_id"]=Json::Value();
    }
    return ret;
}

Json::Value StudentTask::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTask())
            {
                ret[pMasqueradingVector[1]]=getValueOfTask();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getStudentId())
            {
                ret[pMasqueradingVector[2]]=getValueOfStudentId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTask())
    {
        ret["task"]=getValueOfTask();
    }
    else
    {
        ret["task"]=Json::Value();
    }
    if(getStudentId())
    {
        ret["student_id"]=getValueOfStudentId();
    }
    else
    {
        ret["student_id"]=Json::Value();
    }
    return ret;
}

bool StudentTask::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("task"))
    {
        if(!validJsonOfField(1, "task", pJson["task"], err, true))
            return false;
    }
    if(pJson.isMember("student_id"))
    {
        if(!validJsonOfField(2, "student_id", pJson["student_id"], err, true))
            return false;
    }
    return true;
}
bool StudentTask::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool StudentTask::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("task"))
    {
        if(!validJsonOfField(1, "task", pJson["task"], err, false))
            return false;
    }
    if(pJson.isMember("student_id"))
    {
        if(!validJsonOfField(2, "student_id", pJson["student_id"], err, false))
            return false;
    }
    return true;
}
bool StudentTask::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool StudentTask::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Student StudentTask::getStudent(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from student where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *studentId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Student(r[0]);
}

void StudentTask::getStudent(const DbClientPtr &clientPtr,
                             const std::function<void(Student)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from student where id = $1";
    *clientPtr << sql
               << *studentId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Student(r[0]));
                    }
               }
               >> ecb;
}
